
//filepath: array.hpp
#pragma once

#include <Arduino.h>

template <typename T = byte>
struct Array
{
    T *data = nullptr;
    int size = 0;

    // Default Constructor
    Array() = default;

    // Constructor to initialize array
    Array(int _size, T *_data) : size(_size), data(_data) {}

    // Destructor
    ~Array()
    {
        if (data)
        {
            delete[] data;
            data = nullptr;
        }
    }
};

//filepath: buffer.hpp
#pragma once

#include <Arduino.h>

struct Buffer
{
    int size = 0;
    byte *data = nullptr; // Ensure data is initialized to nullptr
};

//filepath: informations-uebertragung.ino
#include <Arduino.h>
#include "./node.hpp"

// Callback to handle received pockets
void handlePocket(const Pocket &p)
{
    Serial.println("Pocket received!");
}

// Callback for custom behavior during the reading process
void continueReading(const Pocket &p)
{
    Serial.println("Reading in progress...");
    delay(10); // Simulated work
}

void setup()
{
    Serial.begin(9600);

    // Define the signal array
    byte signalData[] = {255, 0, 255, 123};
    Array<byte> signal(sizeof(signalData), signalData);

    // Define data to send
    byte dataToSend[] = {42, 43, 44};
    Array<byte> data(sizeof(dataToSend), dataToSend);

    // Initialize Node metadata
    NodeMetaData nodeMeta = {
        .pin = 13,
        .signal = signal};

    // Create a Node instance
    Node node(nodeMeta);

    // Set callbacks
    node.onPocket = handlePocket;
    node.continueCallback = continueReading;

    // Simulate sending a pocket
    Pocket pocketToSend(data, signal, PocketMetadata());
    node.send(pocketToSend);
}

void loop()
{
    // Simulate reading updates in the loop
    // Node node.update() should be called to check for incoming pockets
}

//filepath: node.hpp
#pragma once

#include <Arduino.h>
#include "./array.hpp"
#include "./pocket.hpp"

struct NodeMetaData
{
    uint8_t pin;
    Array<byte> signal;
};

struct Node
{
    NodeMetaData meta;

    void (*onPocket)(const Pocket &p) = nullptr;
    void (*continueCallback)(const Pocket &p) = nullptr;

    Node(NodeMetaData meta) : meta(meta)
    {
        pinMode(meta.pin, INPUT);
    }

    void update()
    {
        // Initialize an empty Pocket with the Node's signal and metadata
        Pocket pocket(
            Array<byte>(nullptr, 0), // Placeholder data array
            meta.signal,
            PocketMetadata());

        // Assign the continue callback
        pocket.continueCallback = continueCallback;

        // Attempt to read a Pocket from the input pin
        if (pocket.read(meta.pin))
        {
            // If successfully read, trigger the onPocket handler if set
            if (onPocket)
            {
                onPocket(pocket);
            }
        }
    }

    bool send(const Pocket &pocket)
    {
        // Pin must be set to OUTPUT for sending
        pinMode(meta.pin, OUTPUT);

    // Use the Pocket's send method
        pocket.send(meta.pin);

        // Restore pin to INPUT mode after sending
        pinMode(meta.pin, INPUT);

        return true; // Indicate successful send
    }
};

//filepath: pocket.hpp
#pragma once

#include <Arduino.h>
#include "./buffer.hpp"

#define HASHSIZE 4
#define DEFAULT_WRITE_SPEED 20

// A simple hash function
void generateHash(const byte *data, int size, byte *hash)
{
    // Basic hash calculation (e.g., sum of bytes modulo 256 for simplicity)
    uint32_t sum = 0;
    for (int i = 0; i < size; i++)
    {
        sum += data[i];
    }
    hash[0] = (sum >> 24) & 0xFF; // MSB
    hash[1] = (sum >> 16) & 0xFF;
    hash[2] = (sum >> 8) & 0xFF;
    hash[3] = sum & 0xFF; // LSB
}

struct PocketMetadata
{
    int size = 0;
    int id = rand();
    int writeSpeed = DEFAULT_WRITE_SPEED;
};

struct Pocket
{
    Array<byte> data;
    Array<byte> signal;
    PocketMetadata pocketMetadata;

    // Callback to decide whether to continue reading
    void (*continueCallback)(const Pocket &p) = nullptr;

    Pocket(Array<byte> _data, Array<byte> _signal, PocketMetadata _pocketMetadata)
        : data(_data), signal(_signal), pocketMetadata(_pocketMetadata) {}

    bool read(byte pin)
    {
        byte receivedSignal[signal.size];
        int signalIndex = 0;

        while (true)
        {
            // Call the continue callback if set
            if (continueCallback)
            {
                continueCallback(*this);
            }

            // Read signal data
            byte value = digitalRead(pin);

            if (signalIndex < signal.size)
            {
                receivedSignal[signalIndex++] = value;
            }

            // If signal is complete, validate it
            if (signalIndex == signal.size)
            {
                bool isSignalMatch = true;
                for (int i = 0; i < signal.size; i++)
                {
                    if (receivedSignal[i] != signal.data[i])
                    {
                        isSignalMatch = false;
                        break;
                    }
                }

                if (isSignalMatch)
                {
                    // Signal matches; proceed to read metadata and data
                    byte metadataBuffer[sizeof(PocketMetadata)];
                    for (int j = 0; j < sizeof(PocketMetadata); j++)
                    {
                        if (continueCallback)
                        {
                            continueCallback(*this);
                        }
                        metadataBuffer[j] = digitalRead(pin);
                        delay(pocketMetadata.writeSpeed);
                    }

                    // Validate metadata hash
                    byte metadataHash[HASHSIZE];
                    for (int j = 0; j < HASHSIZE; j++)
                    {
                        if (continueCallback)
                        {
                            continueCallback(*this);
                        }
                        metadataHash[j] = digitalRead(pin);
                        delay(pocketMetadata.writeSpeed);
                    }

                    byte computedHash[HASHSIZE];
                    generateHash(metadataBuffer, sizeof(PocketMetadata), computedHash);
                    for (int j = 0; j < HASHSIZE; j++)
                    {
                        if (metadataHash[j] != computedHash[j])
                        {
                            return false; // Metadata hash mismatch
                        }
                    }

                    // Parse metadata
                    memcpy(&pocketMetadata, metadataBuffer, sizeof(PocketMetadata));

                    // Read data
                    byte *dataBuffer = new byte[pocketMetadata.size];
                    for (int j = 0; j < pocketMetadata.size; j++)
                    {
                        if (continueCallback)
                        {
                            continueCallback(*this);
                        }
                        dataBuffer[j] = digitalRead(pin);
                        delay(pocketMetadata.writeSpeed);
                    }

                    // Validate data hash
                    byte dataHash[HASHSIZE];
                    for (int j = 0; j < HASHSIZE; j++)
                    {
                        if (continueCallback)
                        {
                            continueCallback(*this);
                        }
                        dataHash[j] = digitalRead(pin);
                        delay(pocketMetadata.writeSpeed);
                    }

                    generateHash(dataBuffer, pocketMetadata.size, computedHash);
                    for (int j = 0; j < HASHSIZE; j++)
                    {
                        if (dataHash[j] != computedHash[j])
                        {
                            delete[] dataBuffer;
                            return false; // Data hash mismatch
                        }
                    }

                    // Assign data
                    data = Array<byte>(pocketMetadata.size, dataBuffer);

                    return true; // Successfully read and validated
                }
                else
                {
                    signalIndex = 0; // Reset signal index to try again
                }
            }

            delay(pocketMetadata.writeSpeed);
        }

        return false; // Should never reach this point
    }
};

